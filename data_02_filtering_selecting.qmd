# Filtering, selecting & renaming {#sec-data-filtering-selecting}

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE
)
#install.packages("kableExtra")
library(rio)
```

Here we will introduce a number of important techniques that will help you to work with existing data sets and to set up your own data sets. This concerns how to select specific columns, how to filter cases based on conditions and how to rename variables.

We will illustrate them on different data sets. One is the 'deniro.csv' file from week 1 (available [here)](https://people.sc.fsu.edu/~jburkardt/data/csv/deniro.csv) which contains Rotten Tomato ratings of movies with Robert De Niro. There are 87 records. Each record has Year, Rating, Title.

> Make sure to save the file to your project folder, because that is where R will look for the file when you open it.

You can import this data set in R using the following code:

```{r}
#| echo: false
library(rio) 
deniro_data <- import("data/deniro.csv") 
```


```{r}
#| eval: false
library(rio) 
deniro_data <- import("deniro.csv") 
```

We can take a look at the first six rows of the data set by using the `head()` function:

```{r, include=TRUE}
head(deniro_data)
```

## Tibbles
We already encountered data frames in the first week. Data frames are one of the 'original' ways in R to interact with data. However, because of the way they are displayed, it can sometimes be difficult to manipulate data in them and to print their content.

A tibble, or tbl_df, is a modern 'version' of the data frame. Tibbles have a refined print method that shows only the first 10 rows, and all the columns that fit on screen. Tibbles are therefore easier to use if you have large data sets containing complex objects. While the data set used here is not particularly complex, it makes sense to get used to tibbles.

To be able to work with tibbles, you must install tidyverse `install.packages("tidyverse")` (already done on University computers). We can load the tidyverse packages by typing:

```{r, include=TRUE}
library(tidyverse)
```

To transform our data set into a tibble, we can write.

```{r, include=TRUE}
deniro_data <- as_tibble(deniro_data)
```

`deniro_data <- as_tibble(deniro_data)`

:   With this code we turn the existing object `deniro_data` into a tibble, a data frame with class tbl_df. If your data frame has a different name, you need to change the name. When we now open the data frame we can see that the way the data frame is displayed has changed. Note that nothing has been changed in terms of content. All the original variables and values are still the same. It is only a visual change at this point.

```{r, include=TRUE}
deniro_data 
```

## Selecting

Once we have opened our data set we can start selecting variables. For example, if we want to select the columns (variables) regarding publication year (`Year`) and the title of the movie (`Title`) by their names, we can write:

```{r, include=TRUE}
deniro_data |> 
  select(Year, Title)
```

`deniro_data |>`

:   This part of the code extract one or multiple columns from `deniro_data`. Note that we use the native pipe operator (`|>`), see week 2.

`select(Year, Title)`

:   Here we select two columns of the tibble, named `Year` and `Title`. Note that as a matter of style, we suggest to put any new commands in a pipe on the next line (see overview of week 2)

There are several special functions that can be used inside `select()`. It is possible to apply a function to the columns and, for example, select only numeric columns:

```{r, include=TRUE}
deniro_data |> 
  select(where(is.numeric))
```

`deniro_data |>`

:   This part of the code extract one or multiple columns from `deniro_data`. Note that we use the native pipe operator (`|>`), see week 2.

`select(where(is.numeric))`

:   Here we select only those columns in `deniro_data` that are numeric.

`select()` can be also used to remove columns from the data frame. For this we would use the '-' sign:

```{r, include=TRUE}
deniro_data |> 
  select(-Year, -Title)
```

Note that at this point, none of the changes are 'permanent' because the resulting data frame (tibble) is not 'created' but only printed. You simply ask R to execute the command in the existing data set and print out the result (not save it). If you want to select (or remove) a variable on a permanent basis then you would need to create a new object. So, for example, if you want to only keep the columns (variables) of Year and Movie Title by their names, then you would need to write:

```{r, include=TRUE}
new_deniro_data <- deniro_data |> 
  select(Year, Title)
```

`new_deniro_data <-`

:   This part of the code creates a new object called 'new_deniro_data'.

`deniro_data |> select(Year, Title)`

:   This part of the code extract one or multiple columns as a data table.

Note that you do not always have to create a new data set. If you would like to change the existing data set, assign the result to an object with the same name:

```{r, include=TRUE}
deniro_data <- deniro_data |> 
  select(Year, Title)
```

***Watch out:*** This will ***overwrite*** the existing `deniro_data` with the changes. If you want to get back to the original data set you need to open it again.

## Filtering variables

The `filter()` function is used to subset the rows. There are a number of important functions and operators that are useful when constructing the expressions used to filter the data:

-   == means 'equal to'

-   \< means 'smaller than'

-   \> means 'larger than'

-   \<= means 'equal to or smaller than'

-   \>= means 'equal to or larger than'

-   & means 'AND'

-   \| means 'OR'

-   ! means 'is not'

-   %in% is used to select one of multiple values

```{=html}
<!--# I might change this to the canada data set for the Dutch language version, to have a bit more of continuity in the data sets used as examples
Tim: Sure, sounds good!-->
```
To illustrate the use of some of them, I will use the ['starwars' data set](https://dplyr.tidyverse.org/reference/starwars.html). This is a data set that is automatically loaded with the `tidyverse` package. We can load the package by typing:

```{r, include=TRUE}
library(tidyverse)
starwars
```

Let us assume we want to filter by one or more criteria. For a character variable, we would write:

```{r, include=TRUE}
starwars |> 
  filter(eye_color == "blue")
```

`filter(eye_color == "blue")`

:   The `filter()` function is used to subset a data frame, retaining all rows that satisfy your conditions. Here we ask for a specific eye color.

> One mistake that people often make in filtering character variables is that they forget the quotation marks.

If there are multiple eye colors that you would want to select, you can use `%in%`:

```{r, include=TRUE}
starwars |> 
  filter(eye_color %in% c("blue", "red"))
```

`filter(eye_color %in% c("blue", "red"))`

:   The `filter()` function is used to subset a data frame, retaining all rows that satisfy your conditions. Here we ask for the `eye_color` to be one of the colors in the vector `c("blue", "red")` , i.e. that eye_color is equal to blue or to red.

For a numeric variable (such as height), we do not use the quotation marks. Let us also filter for all characters that are at least 172 cm tall [and]{.underline} have blue eyes.

```{r, include=TRUE}
starwars |> 
  filter(eye_color == "blue" & height >= 172)
```

`filter(eye_color == "blue" & height >= 172)`

:   The `filter()` function is used to subset a data frame, retaining all rows that satisfy your conditions. Here we ask for a specific eye color and at least a specific height.

If you would like to filter characters that are at least 172 cm tall [or]{.underline} have blue eyes, you can use:

```{r, include=TRUE}
starwars |> 
  filter(eye_color == "blue" | height >= 172)
```

You can apply the expressions mentioned above to filter the data. The "!" operator works a bit different because it will select all cases that do ***not*** satisfy a condition. So, for example, if we want to filter all cases that do not have blue eyes, we would write:

```{r, include=TRUE}
starwars |> 
  filter(!(eye_color == "blue"))
```

`filter(!(eye_color == "blue"))`

:   The `filter()` function is used to subset a data frame, retaining all rows that satisfy your conditions. Here we ask to only select cases that do not have a specific eye color. Note that we put an exclamation point around the condition and that the condition is surrouded by brackets.

Note again that none of the changes are 'permanent'. You simply ask R to execute the command in the existing data set 'temporarily'. If you want to filter on a permanent basis then you would need to create a new object (or assign to the current object). So, for example, if you want to only select the cases whose home planet is 'Tatooine', then you would need to write:

```{r, include=TRUE}
new_starwars <- starwars |> 
  filter(homeworld == "Tatooine")
```

`new_starwars <-`

:   This part of the code creates a new object called 'new_starwars'.

`starwars |>`

:   This part of the code takes the starwars tibble as the start of our pipe.

`filter(homeworld == "Tatooine")`

:   This part of the code subset a data frame using the condition as specified.

> One mistake that people often make in filters is using only one equal sign =, where there should be two ==.

## Renaming variables

To change the names of individual variables we use the `rename()` function. It uses the order `new_name = old_name` to rename selected variables.

If we want to rename the column `name` to `character.name`, you would write:

```{r, include=TRUE}
starwars |> 
  rename(character.name = name)
```

However, as was pointed out above, this is not a permanent change. To do this, we need to make sure that it is changed in the existing data frame.

```{r, include=TRUE}
starwars <- starwars |> 
  rename(character.name = name)
```

`starwars <- starwars |>`

:   This part of the code overwrites the existing data frame 'starwars'.

`rename(character.name = name)`

:   This part of the code renames a variable with the general pattern: `<new_name> = <old_name>`

